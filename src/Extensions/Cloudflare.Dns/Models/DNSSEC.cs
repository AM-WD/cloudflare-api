using System.Runtime.Serialization;
using Newtonsoft.Json.Converters;

namespace AMWD.Net.Api.Cloudflare.Dns
{
	/// <summary>
	/// Represents DNS Security Extensions (DNSSEC) information from Cloudflare.
	/// </summary>
	public class DNSSEC
	{
		/// <summary>
		/// Algorithm key code.
		/// </summary>
		[JsonProperty("algorithm")]
		public string? Algorithm { get; set; }

		/// <summary>
		/// Digest hash.
		/// </summary>
		[JsonProperty("digest")]
		public string? Digest { get; set; }

		/// <summary>
		/// Type of digest algorithm.
		/// </summary>
		[JsonProperty("digest_algorithm")]
		public string? DigestAlgorithm { get; set; }

		/// <summary>
		/// Coded type for digest algorithm.
		/// </summary>
		[JsonProperty("digest_type")]
		public string? DigestType { get; set; }

		/// <summary>
		/// If <see langword="true"/>, multi-signer DNSSEC is enabled on the zone, allowing multiple providers to serve a DNSSEC-signed zone at the same time.
		/// </summary>
		/// <remarks>
		/// This is required for DNSKEY records (except those automatically generated by Cloudflare) to be added to the zone.
		/// <br/>
		/// See <see href="https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/">Multi-signer DNSSEC</see> for details.
		/// </remarks>
		[JsonProperty("dnssec_multi_signer")]
		public bool? DnssecMultiSigner { get; set; }

		/// <summary>
		/// If <see langword="true"/>, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without requiring Cloudflare to sign any records on the fly.
		/// </summary>
		/// <remarks>
		/// Note that this feature has some limitations.
		/// See <see href="https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec">Cloudflare as Secondary</see> for details.
		/// </remarks>
		[JsonProperty("dnssec_presigned")]
		public bool? DnssecPresigned { get; set; }

		/// <summary>
		/// If <see langword="true"/>, enables the use of NSEC3 together with DNSSEC on the zone.
		/// </summary>
		/// <remarks>
		/// Combined with setting <see cref="DnssecPresigned"/> to <see langword="true"/>, this enables the use of NSEC3 records when transferring in from an external provider.
		/// If <see cref="DnssecPresigned"/> is instead set to <see langword="false"/> (default), NSEC3 records will be generated and signed at request time.
		/// <br/>
		/// See <see href="https://developers.cloudflare.com/dns/dnssec/enable-nsec3/">DNSSEC with NSEC3</see> for details.
		/// </remarks>
		[JsonProperty("dnssec_use_nsec3")]
		public bool? DnssecUseNsec3 { get; set; }

		/// <summary>
		/// Full DS record.
		/// </summary>
		[JsonProperty("ds")]
		public string? Ds { get; set; }

		/// <summary>
		/// Flag for DNSSEC record.
		/// </summary>
		[JsonProperty("flags")]
		public int? Flags { get; set; }

		/// <summary>
		/// Code for key tag.
		/// </summary>
		[JsonProperty("key_tag")]
		public int? KeyTag { get; set; }

		/// <summary>
		/// Algorithm key type.
		/// </summary>
		[JsonProperty("key_type")]
		public string? KeyType { get; set; }

		/// <summary>
		/// When DNSSEC was last modified.
		/// </summary>
		[JsonProperty("modified_on")]
		public DateTime? ModifiedOn { get; set; }

		/// <summary>
		/// Public key for DS record.
		/// </summary>
		[JsonProperty("public_key")]
		public string? PublicKey { get; set; }

		/// <summary>
		/// Status of DNSSEC, based on user-desired state and presence of necessary records.
		/// </summary>
		[JsonProperty("status")]
		public DNSSECStatus? Status { get; set; }
	}

	/// <summary>
	/// Status of DNSSEC, based on user-desired state and presence of necessary records.
	/// <see href="https://github.com/cloudflare/cloudflare-typescript/blob/v4.4.1/src/resources/dns/dnssec.ts#L153">Source</see>
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	public enum DNSSECStatus
	{
		/// <summary>
		/// Active.
		/// </summary>
		[EnumMember(Value = "active")]
		Active = 1,

		/// <summary>
		/// Pending.
		/// </summary>
		[EnumMember(Value = "pending")]
		Pending = 2,

		/// <summary>
		/// Disabled.
		/// </summary>
		[EnumMember(Value = "disabled")]
		Disabled = 3,

		/// <summary>
		/// Pending disabled.
		/// </summary>
		[EnumMember(Value = "pending-disabled")]
		PendingDisabled = 4,

		/// <summary>
		/// Error.
		/// </summary>
		[EnumMember(Value = "error")]
		Error = 5
	}
}
